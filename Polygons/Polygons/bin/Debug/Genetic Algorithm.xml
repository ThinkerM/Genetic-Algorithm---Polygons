<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Genetic Algorithm</name>
    </assembly>
    <members>
        <member name="T:Genetic_Algorithm.GA.Generics.GaEventArgs`2">
            <summary>
            Store relevant information for genetic algoritms to be passed for Ga event handlers
            </summary>
            <typeparam name="TIndividual">Type of the used <see cref="T:Genetic_Algorithm.GA.Generics.IIndividual`1"/> in the event population</typeparam>
            <typeparam name="TGene">Type of the <see cref="T:Genetic_Algorithm.GA.Generics.IGene"/> in the event population</typeparam>
        </member>
        <member name="P:Genetic_Algorithm.GA.Generics.GaEventArgs`2.SavedPopulation">
            <summary>
            A collection of individuals with additional information about their generation's number within the running GA and the best individual within the population
            </summary>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.GaEventArgs`2.#ctor(Genetic_Algorithm.GA.Generics.Population{`0,`1},System.Int32)">
            <summary>
            Create a <see cref="T:Genetic_Algorithm.GA.Generics.GaEventArgs`2"/> instance
            </summary>
            <param name="eventPopulation">Current generation for the event</param>
            <param name="populationNumber">Current number of the generation</param>
        </member>
        <member name="T:Genetic_Algorithm.GA.Generics.GeneticAlgorithm`2">
            <summary>
            Main driver class to handle logic of the genetic algorithm
            </summary>
            <typeparam name="TIndividual"></typeparam>
            <typeparam name="TGene"></typeparam>
        </member>
        <member name="F:Genetic_Algorithm.GA.Generics.GeneticAlgorithm`2.adapter">
            <summary>
            Handles logic of breeding, selecting, mutating, etc.
            </summary>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.GeneticAlgorithm`2.#ctor(Genetic_Algorithm.GA.Generics.IGeneticAlgorithmAdapter{`0,`1},System.Int32)">
            <summary>
            Creates an instance of GA with a random initial population sample
            </summary>
            <param name="adapter">GA Adapter to be used by the algorithm</param>
            <param name="desiredSize"></param>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.GeneticAlgorithm`2.#ctor(Genetic_Algorithm.GA.Generics.IGeneticAlgorithmAdapter{`0,`1},System.Collections.Generic.ICollection{`0},System.Int32)">
            <summary>
            Creates an instance of GA whose initial population contains certain individuals 
            (+ additional random individuals if desired population size is larger than number of defined ones)
            </summary>
            <param name="adapter">GA Adapter to be used by the algorithm</param>
            <param name="include">Set of individuals to be included in the initial population</param>
            <param name="desiredSize"></param>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.GeneticAlgorithm`2.RunGenerations(System.Int32)">
            <summary>
            Perform necessary logic on a specified number of generations, then pause
            </summary>
            <param name="n">Number of generations to run</param>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.GeneticAlgorithm`2.OnGenerationComplete(Genetic_Algorithm.GA.Generics.GaEventArgs{`0,`1})">
            <summary>
            Invokes the <see cref="E:Genetic_Algorithm.GA.Generics.GeneticAlgorithm`2.GenerationComplete"/> event
            </summary>
            <param name="ge">Information about the event population</param>
        </member>
        <member name="E:Genetic_Algorithm.GA.Generics.GeneticAlgorithm`2.Initialised">
            <summary>
            Raised when a <see cref="T:Genetic_Algorithm.GA.Generics.GeneticAlgorithm`2"/> finishes its construction and initialisation
            </summary>
        </member>
        <member name="T:Genetic_Algorithm.GA.Generics.GeneticAlgorithmAdapter`2">
            <summary>
            Provides methods for manipulating populations in GA to produce new generations
            </summary>
            <typeparam name="TIndividual">Class implementing GA Individual</typeparam>
            <typeparam name="TGene">Class implementing GA IGene</typeparam>
        </member>
        <member name="T:Genetic_Algorithm.GA.Generics.IFitnessCalculator`2">
            <summary>
            Evaluates <see cref="T:Genetic_Algorithm.GA.Generics.IIndividual`1"/>s and sets + returns their calculated fitness score
            </summary>
            <typeparam name="TIndividual"></typeparam>
            <typeparam name="TGene"></typeparam>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.IFitnessCalculator`2.IndividualFitness(`0)">
            <summary>
            Calculate fitness value for the whole individual
            </summary>
            <param name="individual">GA Individual to calculate for</param>
            <returns>Fitness score</returns>
        </member>
        <member name="P:Genetic_Algorithm.GA.Generics.IFitnessCalculator`2.Name">
            <summary>
            Name of the calculator to be used in calculators selection (improved readability)
            </summary>
        </member>
        <member name="T:Genetic_Algorithm.GA.Generics.IGene">
            <summary>
            Stores an encoded representation of any trait which can be mutated
            </summary>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.IGene.Mutate">
            <summary>
            Change encoded values of the gene
            </summary>
        </member>
        <member name="T:Genetic_Algorithm.GA.Generics.IGene`1">
            <summary>
            Represents GA Gene with a specified encoded object
            </summary>
            <typeparam name="TEncoded">Encoded object type</typeparam>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.IGene`1.Decode">
            <summary>
            Revert gene back into the object it is encoding
            </summary>
            <returns>Object which was encoded in the gene</returns>
        </member>
        <member name="T:Genetic_Algorithm.GA.Generics.IGeneticAlgorithmAdapter`2">
            <summary>
            Provides methods for manipulating populations in GA to produce new generations
            </summary>
            <typeparam name="TIndividual">Class implementing GA Individual</typeparam>
            <typeparam name="TGene">Class implementing GA IGene</typeparam>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.IGeneticAlgorithmAdapter`2.SelectForRouletteBreeding(Genetic_Algorithm.GA.Generics.Population{`0,`1},`0)">
            <summary>
            Chooses an individual for further reproduction based on roulette-rules
            </summary>
            <param name="sourcePopulation">Population to choose from</param>
            <param name="forbiddenForBreeding"><para>Individuals which cannot be selected for breeding.</para>
            Use primarily if you want to prevent an individual from breeding with itself</param>
            <returns>Selected individual</returns>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.IGeneticAlgorithmAdapter`2.SelectSteadyStateSurvivors(Genetic_Algorithm.GA.Generics.Population{`0,`1},System.Double,System.Boolean)">
            <summary>
            Selects fittest part of the population to transfer into the next generation
            </summary>
            <param name="sourcePopulation">Population to choose from</param>
            <param name="survivalRatio">Proportion of individuals to keep alive</param>
            <param name="elitism">Indicates whether elitism is on/off</param>
            <returns></returns>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.IGeneticAlgorithmAdapter`2.CrossOver(`0,`0)">
            <summary>
            Creates a new child from the genomes of two parents
            </summary>
            <param name="parent1">First parent to cross over</param>
            <param name="parent2">Second parent to cross over</param>
            <returns>Crossed over child</returns>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.IGeneticAlgorithmAdapter`2.CrossoverShouldOccur(System.Double)">
            <summary>
            Determines whether a crossover of genomes between individuals should occur based on crossover probability
            </summary>
            <param name="crossoverProbability">Percentage value indicating how likely crossover should be to occur</param>
            <returns>True to crossover, False to forbid crossover</returns>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.IGeneticAlgorithmAdapter`2.GetEliteIndividual(Genetic_Algorithm.GA.Generics.Population{`0,`1})">
            <summary>
            Find the fittest individual and set its property to Elite
            </summary>
            <param name="population">Population to search in</param>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.IGeneticAlgorithmAdapter`2.Mutate(`0,System.Double)">
            <summary>
            Invoke mutation on an individual
            </summary>
            <param name="individual"></param>
            <param name="mutationProbability"></param>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.IGeneticAlgorithmAdapter`2.MutatePopulation(Genetic_Algorithm.GA.Generics.Population{`0,`1},System.Double)">
            <summary>
            Invoke mutation on every non-elite member of population
            </summary>
            <param name="population">Population to perform mutation on</param>
            <param name="mutationProbability"></param>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.IGeneticAlgorithmAdapter`2.MutationShouldOccur(`0)">
            <summary>
            Determines whether individual is allowed to mutate based on its Elite property
            </summary>
            <param name="individual">Subject of decision</param>
            <returns>True to mutate, False not to mutate</returns>
        </member>
        <member name="T:Genetic_Algorithm.GA.Generics.NumberedPopulation`2">
            <summary>
            Extended population with additional information about its number as a generation in GA and the highest fitness value achieved
            </summary>
            <typeparam name="TIndividual">Type of <see cref="T:Genetic_Algorithm.GA.Generics.IIndividual`1"/> in the population</typeparam>
            <typeparam name="TGene">Type of <see cref="T:Genetic_Algorithm.GA.Generics.IGene"/> in the population</typeparam>
        </member>
        <member name="P:Genetic_Algorithm.GA.Generics.NumberedPopulation`2.Number">
            <summary>
            Ordinal number of the generation stored in the population
            </summary>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.NumberedPopulation`2.#ctor(Genetic_Algorithm.GA.Generics.Population{`0,`1},System.Int32)">
            <summary>
            Create a population with additional GA information
            </summary>
            <param name="population">Individuals to store</param>
            <param name="number">N-th generation in a GA</param>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.NumberedPopulation`2.TrySetFitness(System.Double)">
            <summary>
            Only allows to set <see cref="P:Genetic_Algorithm.GA.Generics.NumberedPopulation`2.TopFitness"/> if it hasn't been initialised yet (in case top fitness couldn't be acquired during construction)
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.NumberedPopulation`2.ToString">
            <summary>
            String representation of <see cref="T:Genetic_Algorithm.GA.Generics.NumberedPopulation`2"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Genetic_Algorithm.GA.Generics.Population`2">
            <summary>
            Collection of individuals in a genetic algorithm
            </summary>
            <typeparam name="TIndividual">Type of the individual in the population</typeparam>
            <typeparam name="TGene">Type of the gene encoded in individual's genome</typeparam>
        </member>
        <member name="P:Genetic_Algorithm.GA.Generics.Population`2.DesiredSize">
            <summary>
            Number of individuals in population which need to be achieved for a complete generation
            </summary>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.Population`2.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a population of random individuals
            </summary>
            <param name="randomIndividuals">Number of individuals to add</param>
            <param name="desiredSize">Size of the population which needs to be reached to be considered "adequately filled"</param>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.Population`2.EmptyPopulation">
            <summary>
            Create a <see cref="T:Genetic_Algorithm.GA.Generics.Population`2"/> with no members
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.Population`2.#ctor(Genetic_Algorithm.GA.Generics.Population{`0,`1})">
            <summary>
            Construct a new population as a copy of another population
            </summary>
            <param name="template">Population to copy</param>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.Population`2.FilledDesiredSize">
            <summary>
            Indicates whether the population's size has reached or exceeded the set <see cref="P:Genetic_Algorithm.GA.Generics.Population`2.DesiredSize"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Genetic_Algorithm.GA.Generics.IIndividual`1">
            <summary>
            Represents an organism/individual in a genetic algorithm
            </summary>
        </member>
        <member name="P:Genetic_Algorithm.GA.Generics.IIndividual`1.IsElite">
            <summary>
            Indicates whether the individual is currently the elite member of its generation.
            Elite individuals will be copied over to the next generation without any mutations.
            </summary>
        </member>
        <member name="M:Genetic_Algorithm.GA.Generics.IIndividual`1.Mutate(System.Double)">
            <summary>
            Allow for random alteration of the individual's genome
            </summary>
            <param name="mutationProbability">Likelihood for every single gene to mutate</param>
        </member>
        <member name="T:Genetic_Algorithm.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Genetic_Algorithm.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Genetic_Algorithm.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Genetic_Algorithm.Utils.SelectionType">
            <summary>
            Defines different methods of selecting individuals to advance into further generations
            </summary>
        </member>
        <member name="F:Genetic_Algorithm.Utils.SelectionType.Roulette">
            <summary>
            Every individual's fitness proportionally increases its chance to be selected.
            </summary>
            <remarks>
            If an individua's fitness makes up 30% of the whole population's summed scores, the individual has 30% chance to be selected.
            </remarks>
        </member>
        <member name="F:Genetic_Algorithm.Utils.SelectionType.SteadyState">
            <summary>
            Larger group of individuals is selected to survive into next generation.
            </summary>
            <remarks>
            Certain percentage of individuals gets "killed", the remainder continues (and possibly gets mutated) 
            and creates new offspring to fill the gap after the killed individuals.
            </remarks>
        </member>
        <member name="T:Genetic_Algorithm.Utils.SettingsAccessor">
            <summary>
            Serves as an intermediary to the Genetic Algorithm's GaSettings.Default
            </summary>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CustomExtensions</name>
    </assembly>
    <members>
        <member name="T:CustomExtensions.Collections.CollectionExtensions">
            <summary>
            Provides static methods for operations on Enumerables, Collections, Lists, etc.
            </summary>
        </member>
        <member name="M:CustomExtensions.Collections.CollectionExtensions.AllExcept``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Get all elements of IEnumerable except for one at a specified index
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="indexToSkip"></param>
            <returns></returns>
        </member>
        <member name="M:CustomExtensions.Collections.CollectionExtensions.ConcatenateMultiple``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Iterate over contents of all Enumerables
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inputs">All enumerations to concatenate</param>
            <returns></returns>
        </member>
        <member name="M:CustomExtensions.Collections.CollectionExtensions.AdjacentPairs``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
            <summary>
            Get every consecutive pair of elements from the original sequence
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="T:CustomExtensions.Geometry.LineEquation">
            <summary>
            Representation of a line in 2D
            </summary>
        </member>
        <member name="M:CustomExtensions.Geometry.LineEquation.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Construct a line representation
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="P:CustomExtensions.Geometry.LineEquation.Start">
            <summary>
            One end of the line
            </summary>
        </member>
        <member name="P:CustomExtensions.Geometry.LineEquation.End">
            <summary>
            Second end point of the line
            </summary>
        </member>
        <member name="P:CustomExtensions.Geometry.LineEquation.A">
            <summary>
            Line equation X-slope parameter
            </summary>
        </member>
        <member name="P:CustomExtensions.Geometry.LineEquation.B">
            <summary>
            Line equation Y-slope parameter
            </summary>
        </member>
        <member name="P:CustomExtensions.Geometry.LineEquation.C">
            <summary>
            Line equation shift parameter
            </summary>
        </member>
        <member name="M:CustomExtensions.Geometry.LineEquation.GetIntersectionWithLine(CustomExtensions.Geometry.LineEquation)">
            <summary>
            Find an intersection of two lines or null if they are parallel
            </summary>
            <param name="otherLine"></param>
            <returns></returns>
        </member>
        <member name="M:CustomExtensions.Geometry.LineEquation.GetIntersectionWithLineSegment(CustomExtensions.Geometry.LineEquation)">
            <summary>
            Find an intersection of this line and a segment of another
            </summary>
            <param name="otherSegment"></param>
            <returns></returns>
        </member>
        <member name="M:CustomExtensions.Geometry.LineEquation.GetSegmentIntersectionWithOtherSegment(CustomExtensions.Geometry.LineEquation)">
            <summary>
            Find an intersection of this line's defines start-end segment and another segment
            </summary>
            <param name="otherSegment"></param>
            <returns></returns>
        </member>
        <member name="M:CustomExtensions.Geometry.LineEquation.ToString">
            <summary>
            String representation of segment
            </summary>
            <returns></returns>
        </member>
        <member name="F:CustomExtensions.Geometry.DoubleExtensions.NegativeMachineEpsilon">
             <summary>
             The smallest positive number that when SUBTRACTED from 1D yields a result different from 1D.
             The value is derived from 2^(-53) = 1.1102230246251565e-16, where IEEE 754 binary64 &quot;double precision&quot; floating point numbers have a significand precision that utilize 53 bits.
            
             This number has the following properties:
                 (1 - NegativeMachineEpsilon) &lt; 1 and
                 (1 + NegativeMachineEpsilon) == 1
             </summary>
        </member>
        <member name="F:CustomExtensions.Geometry.DoubleExtensions.PositiveMachineEpsilon">
             <summary>
             The smallest positive number that when ADDED to 1D yields a result different from 1D.
             The value is derived from 2 * 2^(-53) = 2.2204460492503131e-16, where IEEE 754 binary64 &quot;double precision&quot; floating point numbers have a significand precision that utilize 53 bits.
            
             This number has the following properties:
                 (1 - PositiveDoublePrecision) &lt; 1 and
                 (1 + PositiveDoublePrecision) &gt; 1
             </summary>
        </member>
        <member name="F:CustomExtensions.Geometry.DoubleExtensions.MeasuredNegativeMachineEpsilon">
             <summary>
             The smallest positive number that when SUBTRACTED from 1D yields a result different from 1D.
            
             This number has the following properties:
                 (1 - NegativeMachineEpsilon) &lt; 1 and
                 (1 + NegativeMachineEpsilon) == 1
             </summary>
        </member>
        <member name="F:CustomExtensions.Geometry.DoubleExtensions.MeasuredPositiveMachineEpsilon">
             <summary>
             The smallest positive number that when ADDED to 1D yields a result different from 1D.
            
             This number has the following properties:
                 (1 - PositiveDoublePrecision) &lt; 1 and
                 (1 + PositiveDoublePrecision) &gt; 1
             </summary>
        </member>
        <member name="T:CustomExtensions.Geometry.RectangleExtentions">
            <summary>
            Extension methods for working with Rectangles
            </summary>
        </member>
        <member name="M:CustomExtensions.Geometry.RectangleExtentions.LineSegments(System.Drawing.Rectangle)">
            <summary>
            Evaluate whether a rectangle intersects a line(segment), give intersected segments
            </summary>
            <param name="rectangle">Rectangle to check for intersection of line</param>
            <returns></returns>
        </member>
        <member name="M:CustomExtensions.Geometry.RectangleExtentions.Center(System.Drawing.Rectangle)">
            <summary>
            Returns the center point of the rectangle
            </summary>
            <param name="r"></param>
            <returns>Center point of the rectangle</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.RectangleExtentions.CenterRight(System.Drawing.Rectangle)">
            <summary>
            Returns the center right point of the rectangle
            i.e. the right hand edge, centered vertically.
            </summary>
            <param name="r"></param>
            <returns>Center right point of the rectangle</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.RectangleExtentions.CenterLeft(System.Drawing.Rectangle)">
            <summary>
            Returns the center left point of the rectangle
            i.e. the left hand edge, centered vertically.
            </summary>
            <param name="r"></param>
            <returns>Center left point of the rectangle</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.RectangleExtentions.CenterBottom(System.Drawing.Rectangle)">
            <summary>
            Returns the center bottom point of the rectangle
            i.e. the bottom edge, centered horizontally.
            </summary>
            <param name="r"></param>
            <returns>Center bottom point of the rectangle</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.RectangleExtentions.CenterTop(System.Drawing.Rectangle)">
            <summary>
            Returns the center top point of the rectangle
            i.e. the topedge, centered horizontally.
            </summary>
            <param name="r"></param>
            <returns>Center top point of the rectangle</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.RectangleExtentions.IsBetweenTwoPoints(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Evaluate if a point is on a semi-plane between two other points
            </summary>
            <param name="targetPoint"></param>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="T:CustomExtensions.Geometry.Angle">
            <summary>
            Normalized representation of an angle (within 0-2π / 0-360°)
            </summary>
        </member>
        <member name="P:CustomExtensions.Geometry.Angle.Degrees">
            <summary>
            Representation of angle in degrees
            </summary>
        </member>
        <member name="P:CustomExtensions.Geometry.Angle.Radians">
            <summary>
            Representation of angle in radians
            </summary>
        </member>
        <member name="M:CustomExtensions.Geometry.Angle.FromDegrees(System.Int32)">
            <summary>
            Construct angle from a value in degrees
            </summary>
            <param name="degrees">Degrees representing angle</param>
            <returns>Angle represented by value</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.Angle.FromRadians(System.Double)">
            <summary>
            Construct angle from a value in radians
            </summary>
            <param name="radians">Radians representing angle</param>
            <returns>Angle represented by value</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.Angle.FlipAgainstYAxis(CustomExtensions.Geometry.Angle)">
            <summary>
            Calculate angle mirrored against the vertical axis
            </summary>
            <param name="toFlip">Angle to mirror</param>
            <returns>Mirrored angle</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.Angle.FlipAgainstYAxis">
            <summary>
            Adjust self to a mirrored angle in regards to the vertical axis
            </summary>
        </member>
        <member name="M:CustomExtensions.Geometry.Angle.Equals(System.Object)">
            <summary>
            Determine equality of angle with another object
            </summary>
            <param name="other">Object to compare with</param>
            <returns>True for "Equal", False otherwise</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.Angle.Equals(CustomExtensions.Geometry.Angle)">
            <summary>
            Determine equality of angle with another angle
            </summary>
            <param name="other">Angle to compare with</param>
            <returns>True for "Equal", False otherwise</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.Angle.op_Equality(CustomExtensions.Geometry.Angle,CustomExtensions.Geometry.Angle)">
            <summary>
            Determine equality of two angles
            </summary>
            <param name="angle1"></param>
            <param name="angle2"></param>
            <returns>True if equal, False otherwise</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.Angle.op_Inequality(CustomExtensions.Geometry.Angle,CustomExtensions.Geometry.Angle)">
            <summary>
            Determine inequality of two angles
            </summary>
            <param name="angle1"></param>
            <param name="angle2"></param>
            <returns>True if not equal, false if equal</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.Angle.op_Addition(CustomExtensions.Geometry.Angle,CustomExtensions.Geometry.Angle)">
            <summary>
            Add up two angles
            </summary>
            <param name="angle1"></param>
            <param name="angle2"></param>
            <returns>Result of adding two angles</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.Angle.op_Addition(CustomExtensions.Geometry.Angle,System.Int32)">
            <summary>
            Add degrees to an angle
            </summary>
            <param name="angle">Angle to add to</param>
            <param name="degrees">Degrees to add</param>
            <returns>Result of addition of degrees to angle</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.Angle.op_Subtraction(CustomExtensions.Geometry.Angle,System.Int32)">
            <summary>
            Subtract degrees from angle
            </summary>
            <param name="angle">Angle to subtract from</param>
            <param name="degrees">Degrees to subtract</param>
            <returns>Result of subtraction of degrees from angle</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.Angle.op_Subtraction(CustomExtensions.Geometry.Angle,CustomExtensions.Geometry.Angle)">
            <summary>
            Subtract two angles
            </summary>
            <param name="angle1"></param>
            <param name="angle2"></param>
            <returns>Result of subtracting two angles</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.Angle.GetHashCode">
            <summary>
            Get hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.Angle.Normalize(System.Int32)">
            <summary>
            Ensure value is 0-360
            </summary>
            <param name="degrees">Value to normalize</param>
        </member>
        <member name="T:CustomExtensions.Geometry.GeometryExtensions">
            <summary>
            Provides methods for handling geometry-related problems
            </summary>
        </member>
        <member name="M:CustomExtensions.Geometry.GeometryExtensions.RadiansToDegrees(System.Double)">
            <summary>
            Convert a value in radians to degrees
            </summary>
            <param name="radians">Value in radians to convert</param>
            <returns>Degrees values</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.GeometryExtensions.ToDegrees(System.Double)">
            <summary>
            Convert value in radians to degrees
            </summary>
            <param name="radians">Value in radians to convert</param>
            <returns>Degrees value</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.GeometryExtensions.DegreesToRadians(System.Int32)">
            <summary>
            Convert a value in degrees to radians
            </summary>
            <param name="degrees">Value in degrees to convert</param>
            <returns>Radians value</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.GeometryExtensions.ToRadians(System.Int32)">
            <summary>
            Convert value in degrees to radians
            </summary>
            <param name="degrees">Value in degrees to convert</param>
            <returns>Value in radians</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.GeometryExtensions.Distance(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Distance between two points on a 2D plane
            </summary>
            <param name="p1">Point 1</param>
            <param name="p2">Point 2</param>
            <returns>Euclidean distance between two points</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.GeometryExtensions.DistanceTo(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Distance to another point on a 2D plane
            </summary>
            <param name="origin">Point of origin, this point</param>
            <param name="other">Point to get distance to</param>
            <returns>Distance between this and another point</returns>
        </member>
        <member name="M:CustomExtensions.Geometry.GeometryExtensions.GetCoordinates(System.Drawing.Point,CustomExtensions.Geometry.Angle,System.Double)">
            <summary>
            Calculate location of a point from an angle and distance relative to another point
            </summary>
            <param name="origin">Point to which the angle and distance relate</param>
            <param name="angle">Angle relative to origin</param>
            <param name="distance">Distance relative to origin</param>
            <returns></returns>
        </member>
        <member name="M:CustomExtensions.Geometry.GeometryExtensions.SquaredDistanceTo(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Gives a distance between two points without square-rooting them
            </summary>
            <param name="point"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="T:CustomExtensions.Graphics.GraphicalExtensions">
            <summary>
            Extension methods for all things visual
            </summary>
        </member>
        <member name="M:CustomExtensions.Graphics.GraphicalExtensions.MixWith(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Average ARGB values of both colors
            </summary>
            <param name="c1">First color to mix</param>
            <param name="otherColor">Second color to mix with</param>
            <returns>ARGB average color</returns>
        </member>
        <member name="M:CustomExtensions.Graphics.GraphicalExtensions.Invert(System.Drawing.Color)">
            <summary>
            Get color which represents the inverted RGB values
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:CustomExtensions.Graphics.GraphicalExtensions.Resize(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Resize the image to the specified width and height.
            </summary>
            <param name="image">The image to resize.</param>
            <param name="width">The width to resize to.</param>
            <param name="height">The height to resize to.</param>
            <returns>The resized image.</returns>
        </member>
        <member name="T:CustomExtensions.Math.Combinatorics.Permutations`1">
            <summary>
            Provides enumeration over every permutation of a sequence
            </summary>
            <typeparam name="T">Type of the elements in the permutations</typeparam>
            <remarks>Supports permutations with repetition</remarks>
        </member>
        <member name="M:CustomExtensions.Math.Combinatorics.Permutations`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Construct a class which is capable of permuting a sequence
            </summary>
            <param name="toPermute">Sequence which will be permuted by the class</param>
        </member>
        <member name="M:CustomExtensions.Math.Combinatorics.Permutations`1.GetEnumerator">
            <summary>
            Retrieve an enumerator over all permutations
            </summary>
            <returns></returns>
        </member>
        <member name="T:CustomExtensions.Math.MathExtensions">
            <summary>
            Provides additional methods related to number manipulation
            </summary>
        </member>
        <member name="M:CustomExtensions.Math.MathExtensions.Average(System.Double,System.Double)">
            <summary>
            Arithmetic mean of two values
            </summary>
            <param name="value1">First value to compute mean from</param>
            <param name="value2">Second value to compute mean from</param>
            <returns>Mean of both values</returns>
        </member>
        <member name="M:CustomExtensions.Math.MathExtensions.Average(System.Int32,System.Int32)">
            <summary>
            Arithmetic mean of two values
            </summary>
            <param name="value1">First value to compute mean from</param>
            <param name="value2">Second value to compute mean from</param>
            <returns>Mean of both values</returns>
        </member>
        <member name="M:CustomExtensions.Math.MathExtensions.Average(System.Byte,System.Byte)">
            <summary>
            Arithmetic mean of two values
            </summary>
            <param name="value1">First value to compute mean from</param>
            <param name="value2">Second value to compute mean from</param>
            <returns>Mean of both values</returns>
        </member>
        <member name="M:CustomExtensions.Math.MathExtensions.IsNaN(System.Double)">
            <summary>
            Checks whether the specified value is not a number (double.NaN)
            </summary>
            <param name="value">Value to check</param>
            <returns>True if value is double.NaN, False otherwise</returns>
        </member>
        <member name="M:CustomExtensions.Math.MathExtensions.Max(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get a maximum of 3 values
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
            <returns></returns>
        </member>
        <member name="M:CustomExtensions.Math.MathExtensions.Max(System.Double,System.Double,System.Double)">
            <summary>
            Get a maximum of three values
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
            <returns></returns>
        </member>
        <member name="F:CustomExtensions.Math.DoubleExtensions.NegativeMachineEpsilon">
             <summary>
             The smallest positive number that when SUBTRACTED from 1D yields a result different from 1D.
             The value is derived from 2^(-53) = 1.1102230246251565e-16, where IEEE 754 binary64 &quot;double precision&quot; floating point numbers have a significand precision that utilize 53 bits.
            
             This number has the following properties:
                 (1 - NegativeMachineEpsilon) &lt; 1 and
                 (1 + NegativeMachineEpsilon) == 1
             </summary>
        </member>
        <member name="F:CustomExtensions.Math.DoubleExtensions.PositiveMachineEpsilon">
             <summary>
             The smallest positive number that when ADDED to 1D yields a result different from 1D.
             The value is derived from 2 * 2^(-53) = 2.2204460492503131e-16, where IEEE 754 binary64 &quot;double precision&quot; floating point numbers have a significand precision that utilize 53 bits.
            
             This number has the following properties:
                 (1 - PositiveDoublePrecision) &lt; 1 and
                 (1 + PositiveDoublePrecision) &gt; 1
             </summary>
        </member>
        <member name="F:CustomExtensions.Math.DoubleExtensions.MeasuredNegativeMachineEpsilon">
             <summary>
             The smallest positive number that when SUBTRACTED from 1D yields a result different from 1D.
            
             This number has the following properties:
                 (1 - NegativeMachineEpsilon) &lt; 1 and
                 (1 + NegativeMachineEpsilon) == 1
             </summary>
        </member>
        <member name="F:CustomExtensions.Math.DoubleExtensions.MeasuredPositiveMachineEpsilon">
             <summary>
             The smallest positive number that when ADDED to 1D yields a result different from 1D.
            
             This number has the following properties:
                 (1 - PositiveDoublePrecision) &lt; 1 and
                 (1 + PositiveDoublePrecision) &gt; 1
             </summary>
        </member>
    </members>
</doc>
